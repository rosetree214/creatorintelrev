#!/usr/bin/env python3
"""
Direct functional test of the application components (UI-agnostic).
Uses the `core` module for calculations and models.
"""

import sys
import traceback

# Import core (no Streamlit dependency)
from core import (
    AudioInputs,
    YouTubeInputs,
    OtherRevenue,
    Costs,
    Splits,
    run_annual_projection,
    sanitize_numeric_input,
    _calculate_monthly_values,
    _calculate_audio_revenue,
    _calculate_youtube_revenue,
    Constants,
)

def test_imports():
    """Test all required imports"""
    print("üì¶ TESTING IMPORTS...")
    
    try:
        import pandas as pd
        import numpy as np
        import plotly.graph_objects as go
        import plotly.io as pio
        from pydantic import BaseModel, Field
        from typing import List, Optional
        import io
        import copy
        print("‚úÖ All dependencies imported successfully")
        return True
    except Exception as e:
        print(f"‚ùå Import failed: {e}")
        return False

def test_models():
    """Test Pydantic models"""
    print("\nüèóÔ∏è TESTING DATA MODELS...")
    
    try:
        sys.path.append('.')
        
        # Load and execute only the model definitions
        with open('app.py', 'r') as f:
            app_code = f.read()
        
        # Find the boundary between models and UI
        if '# === MAIN APPLICATION UI ===' in app_code:
            model_code = app_code.split('# === MAIN APPLICATION UI ===')[0]
        else:
            # Fallback to a reasonable split point
            lines = app_code.split('\n')
            model_lines = []
            for line in lines:
                if 'st.' in line and 'import' not in line:
                    break
                model_lines.append(line)
            model_code = '\n'.join(model_lines)
        
        # Execute model definitions
        exec(model_code, globals())
        print("‚úÖ Model code executed successfully")
        
        # Test Constants
        assert Constants.MONTHS_IN_YEAR == 12
        assert Constants.CPM_DIVISOR == 1000
        print("‚úÖ Constants class working")
        
        # Test AudioInputs
        audio = AudioInputs()
        assert audio.monthly_downloads == 100000
        assert 0 <= audio.pct_us <= 1
        print("‚úÖ AudioInputs model validated")
        
        # Test YouTubeInputs
        youtube = YouTubeInputs()
        assert youtube.monthly_views == 500000
        assert 0 <= youtube.pct_monetizable_views <= 1
        print("‚úÖ YouTubeInputs model validated")
        
        # Test calculation functions
        downloads, views = _calculate_monthly_values(audio, youtube, 0)
        assert downloads == 100000  # Should be base value for month 0
        assert views == 500000
        print("‚úÖ Monthly calculations working")
        
        # Test revenue calculations  
        audio_rev = _calculate_audio_revenue(downloads, audio)
        youtube_rev = _calculate_youtube_revenue(views, youtube)
        assert audio_rev > 0
        assert youtube_rev > 0
        print("‚úÖ Revenue calculations working")
        
        # Test security sanitization
        safe_val = sanitize_numeric_input(999999999, 0, 1000)
        assert safe_val == 1000
        print("‚úÖ Input sanitization working")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Model test failed: {e}")
        traceback.print_exc()
        return False

def test_projections():
    """Test full projection calculations"""
    print("\nüìä TESTING REVENUE PROJECTIONS...")
    
    try:
        # Create test inputs
        audio = AudioInputs(
            monthly_downloads=50000,
            direct_rpm=25,
            programmatic_rpm=15
        )
        youtube = YouTubeInputs(
            monthly_views=100000,
            adsense_rpm=8
        )
        other = OtherRevenue(
            subscriptions_monthly=1000,
            affiliate_monthly=500,
            other_monthly=200
        )
        costs = Costs(
            fixed_monthly=2000,
            variable_pct_gross=0.15
        )
        splits = Splits()
        
        # Test projection
        inputs = {
            '_audio': audio.model_dump(),
            '_youtube': youtube.model_dump(),
            '_other': other.model_dump(),
            '_costs': costs.model_dump(),
            '_splits': splits.model_dump()
        }
        
        df = run_annual_projection(**inputs)
        
        # Validate results
        assert len(df) == 12, "Should have 12 months"
        assert all(df['Creator Net Revenue'] >= 0), "No negative revenue"
        assert df['Total Gross Revenue'].sum() > 0, "Should have gross revenue"
        
        annual_net = df['Creator Net Revenue'].sum()
        monthly_avg = annual_net / 12
        
        print(f"‚úÖ Annual Projection: ${annual_net:,.2f}")
        print(f"‚úÖ Monthly Average: ${monthly_avg:,.2f}")
        print("‚úÖ 12-month projection validated")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Projection test failed: {e}")
        traceback.print_exc()
        return False

def main():
    """Run all functional tests"""
    print("üß™ CREATOR REVENUE PLATFORM")
    print("‚öôÔ∏è FUNCTIONAL COMPONENT TEST")
    print("=" * 50)
    
    tests = [
        ("Imports", test_imports),
        ("Data Models", test_models),
        ("Revenue Projections", test_projections)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç {test_name.upper()}...")
        if test_func():
            passed += 1
        else:
            print(f"‚ùå {test_name} failed")
    
    print(f"\nüéØ FUNCTIONAL TEST RESULTS")
    print("=" * 50)
    print(f"‚úÖ Tests Passed: {passed}/{total}")
    print(f"üìä Success Rate: {(passed/total)*100:.0f}%")
    
    if passed == total:
        print(f"\nüöÄ ALL FUNCTIONAL TESTS PASSED!")
        print("‚úÖ Core application logic is working correctly")
        print("‚úÖ Revenue calculations are accurate") 
        print("‚úÖ Security measures are active")
        print("‚úÖ Data models are properly validated")
        return True
    else:
        print(f"\n‚ö†Ô∏è {total-passed} test(s) failed")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print(f"\nüéâ Application core functionality: VERIFIED ‚úÖ")
    else:
        print(f"\n‚ùå Application needs debugging")